// Рекурсивная функция быстрой сортировки
const quickSort = (arr) => {
  // Базовый случай рекурсии: если массив содержит 1 элемент или пуст
  if (arr.length <= 1) {
    return arr; // Возвращаем массив как есть (уже "отсортированный")
  }

  // 1. Выбираем опорный элемент (pivot)
  // В данной реализации всегда берется последний элемент массива
  const pivot = arr[arr.length - 1];

  // 2. Создаем два подмассива для разделения элементов
  const left = []; // Для элементов МЕНЬШЕ опорного
  const right = []; // Для элементов БОЛЬШЕ ИЛИ РАВНЫХ опорному

  // 3. Разделяем элементы относительно опорного
  // (исключая сам pivot из обработки)
  arr.slice(0, -1).forEach((it) => {
    if (it < pivot) {
      left.push(it); // В левую часть если меньше
    } else {
      right.push(it); // В правую если больше или равно
    }
  });

  // 4. Рекурсивно сортируем подмассивы и объединяем результат:
  return [
    ...quickSort(left), // Сортируем левую часть
    pivot, // Опорный элемент
    ...quickSort(right), // Сортируем правую часть
  ];
};
const array = [3, 6, 8, 10, 1, 2, 1];
console.time('quickSort');
const sortedArray = quickSort(array);
console.timeEnd(`quickSort`);
console.log(sortedArray); // [1, 1, 2, 3, 6, 8, 10]

//Быстрая сортировка работает следующим образом:
// 1) Выбор опорного элемента: Из массива выбирается один элемент,
// который будет использоваться в качестве опорного (pivot).
// Он разделит исходный массив на две части.
// (тут стоит отметить, что от этого будет зависеть временная сложность,
// если будет выбран "неудачный" pivot, а именно первый или последний элемент
// при уже отсортированном массиве. Лучше брать случайный элемент)
// 2) Само разделение: элементы меньше опорного и элементы больше опорного.
// 3) Рекурсивная сортировка: Рекурсивно применяется быстрая сортировка к двум полученным подмассивам.
// 4) Объединение: Объединяются отсортированные подмассивы и опорный элемент.
// Условием выхода из рекурсии будет являться длина массива <= 1 - это будет означать,
// что массив уже отсортирован.
// Замерял скорость при массиве из 10 млн. случайных чисел (от 1 до 100к).
// Быстрая сортировка, в сравнении с дефолтным методом массива .sort() справляется на 700-800мс быстрее.
